# 14.3

# 14.3.1 리스트와이즈 삭제와 페어와이즈 삭제

# 결측치, missing value의 처리 방법
# 무작위로 테이블 작성한 뒤 테이블에서 일부 데이터를 누락

import numpy as np
from numpy import nan as NA
import pandas as pd

# sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

# sample_data_frame.iloc[1, 0] = NA
# sample_data_frame.iloc[2, 2] = NA
# sample_data_frame.iloc[5:, 3] = NA

# sample_data_frame

# print(sample_data_frame)
'''
          0         1         2         3
0  0.333092  0.460941  0.729733  0.543124
1       NaN  0.405205  0.118384  0.848534
2  0.230788  0.625149       NaN  0.086633
3  0.641531  0.809202  0.667951  0.165045
4  0.642277  0.506338  0.191951  0.544248
6  0.496098  0.551989  0.573095       NaN
7  0.977882  0.970034  0.273931       NaN
8  0.574318  0.982509  0.608389       NaN
9  0.449193  0.576570  0.815735       NaN
'''
print("==============================================")
# 데이터가 누락 된 행(Nan을 가진 행) 통째로 지우기 : 리스트와이즈삭제
# sample_data_frame = sample_data_frame.dropna()
# print(sample_data_frame)
'''
          0         1         2         3
0  0.333092  0.460941  0.729733  0.543124
3  0.641531  0.809202  0.667951  0.165045
4  0.642277  0.506338  0.191951  0.544248
'''

# 사용 가능한 데이터만을 활용하는 방법
# 결손이 적은 열만 남기는 것 : 페어와이즈 삭제
# 여기서는 0, 1, 2열을 남기게 된다
# sample_data_frame = sample_data_frame[[0, 1, 2]].dropna()
# print(sample_data_frame)
'''
          0         1         2
0  0.070031  0.845971  0.199814
3  0.728143  0.155719  0.551115
4  0.794035  0.389412  0.462847
5  0.861547  0.373096  0.009688
6  0.996764  0.555154  0.285694
7  0.252776  0.956661  0.305934
8  0.850647  0.957258  0.736134
9  0.392418  0.722154  0.286647
'''
print("=============================================")
# 문제 : df의 0, 2열은 남기고 nan 포함 행 삭제하고 출력하기
# sample_data_frame = sample_data_frame[[0, 2]].dropna()
# print(sample_data_frame)
'''
          0         2
0  0.416042  0.449527
3  0.166577  0.383097
4  0.130525  0.615064
5  0.743948  0.708322
6  0.481629  0.484930
7  0.009139  0.935293
8  0.106092  0.771223
9  0.653358  0.563731
'''

# 14.3.2 결측치 보완
# NAN 부분에 대체할 데이터를 대입하자
# fillna() method를 이용하면 NAN 부분에 인자로 넘긴 수를 할당한다
# 0으로 채워보자
# sample_data_frame = sample_data_frame.fillna(0)
# print(sample_data_frame)
'''
          0         1         2         3
0  0.788504  0.657853  0.740683  0.131323
1  0.000000  0.737385  0.502861  0.117129
2  0.386735  0.727618  0.000000  0.946543
3  0.727103  0.476893  0.445740  0.817614
4  0.551008  0.090935  0.662906  0.897706
5  0.764062  0.773817  0.936519  0.000000
6  0.665441  0.784326  0.166098  0.000000
7  0.787424  0.162579  0.394446  0.000000
8  0.958381  0.900058  0.035307  0.000000
9  0.008803  0.154176  0.040302  0.000000
'''

# mothod를 ffill로 지정하면 NAN 부분을 앞에 있는 데이터로 채울 수 있다
# sample_data_frame = sample_data_frame.fillna(method = 'ffill')
# print(sample_data_frame)

'''
          0         1         2         3
0  0.104677  0.563730  0.310370  0.215986
1  0.104677  0.473091  0.329283  0.743661
2  0.378780  0.756055  0.329283  0.526890
3  0.186873  0.364575  0.593125  0.947382
4  0.624983  0.841876  0.353619  0.028248
5  0.323191  0.298943  0.385769  0.028248
6  0.663861  0.273806  0.330667  0.028248
7  0.868511  0.068105  0.506894  0.028248
8  0.066533  0.245413  0.703764  0.028248
9  0.909213  0.961955  0.938353  0.028248
'''

# mothod를 bfill로 지정하면 NAN 부분을 앞에 있는 데이터로 채울 수 있다
# sample_data_frame = sample_data_frame.fillna(method = 'bfill')
# print(sample_data_frame)
'''
          0         1         2         3
0  0.816476  0.518221  0.592090  0.352399
1  0.851388  0.534293  0.114206  0.526921
2  0.851388  0.723589  0.802505  0.825455
3  0.708646  0.528885  0.802505  0.110343
4  0.181567  0.832779  0.071511  0.142305
5  0.607462  0.293941  0.157157       NaN
6  0.424201  0.824855  0.911115       NaN
7  0.879088  0.517575  0.563431       NaN
8  0.499544  0.038768  0.177816       NaN
9  0.118345  0.546155  0.621623       NaN
'''
# 3열의 5행부터 9행까지의 NAN 값은 채워지지 않았다
# 뒤의 값이 존재하지 않기 때문에

# 문제
# sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

# np.random.seed(0) # random 난수 설정(난수를 예측 가능하게 함, 같은 패턴의 난수를 생성)

# sample_data_frame.iloc[1, 0] = NA
# sample_data_frame.iloc[6:, 2] = NA

# print(sample_data_frame)
'''
          0         1         2         3
0  0.460027  0.229975  0.864530  0.463550
1       NaN  0.202914  0.782064  0.270871
2  0.763202  0.039793  0.663011  0.815933
3  0.396433  0.459270  0.975071  0.644121
4  0.729297  0.288898  0.464003  0.112905
5  0.878922  0.770836  0.549171  0.055085
6  0.604454  0.943698       NaN  0.944582
7  0.207966  0.520696       NaN  0.474807
8  0.303453  0.522836       NaN  0.553273
9  0.515465  0.386979       NaN  0.450318
'''
# sample_data_frame = sample_data_frame.fillna(method = 'ffill')
# print(sample_data_frame)
'''
          0         1         2         3
0  0.993917  0.988628  0.756173  0.021016
1  0.993917  0.970035  0.228066  0.241716
2  0.046334  0.175502  0.102387  0.998651
3  0.198330  0.158799  0.212214  0.771755
4  0.603988  0.326449  0.198518  0.650775
5  0.086865  0.451079  0.564113  0.915269
6  0.513559  0.037656  0.564113  0.303302
7  0.085980  0.584459  0.564113  0.693668
8  0.330035  0.258619  0.564113  0.830642
9  0.188663  0.970775  0.564113  0.910662
'''

# 14.3.3 결측치 보완(평균값 대입법)
# 결측치를 열 (또는 행)의 평균값으로 보충한느 방법을 평균값 대입법이라고 한다

# sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

# 일부 데이터 누락
# sample_data_frame.iloc[1, 0] = NA
# sample_data_frame.iloc[2, 2] = NA
# sample_data_frame.iloc[5:, 3] = NA
# print(sample_data_frame)
'''
          0         1         2         3
0  0.623616  0.239644  0.562067  0.204481
1       NaN  0.650966  0.480545  0.990292
2  0.369341  0.880895       NaN  0.266091
3  0.661907  0.416197  0.383164  0.770303
4  0.338648  0.561429  0.680312  0.517453
5  0.234103  0.776066  0.518517       NaN
6  0.653368  0.233717  0.848043       NaN
7  0.048962  0.968951  0.217182       NaN
8  0.032391  0.349824  0.463835       NaN
9  0.852231  0.296651  0.133273       NaN
'''

# sample_data_frame = sample_data_frame.fillna(sample_data_frame.mean())
# print(sample_data_frame)
# 평균값으로 채워진 것을 확인
'''
          0         1         2         3
0  0.560916  0.799841  0.903832  0.682987
1  0.535048  0.685065  0.527972  0.735839
2  0.437336  0.851185  0.422022  0.580866
3  0.701989  0.288882  0.606584  0.687707
4  0.957113  0.243492  0.370562  0.223301
5  0.009022  0.906288  0.808095  0.582140
6  0.836378  0.926528  0.308843  0.582140
7  0.328724  0.514619  0.153257  0.582140
8  0.786385  0.416965  0.037756  0.582140
9  0.197569  0.659409  0.081297  0.582140
'''

# 문제 DataFrame의 NAN 부분을 열의 평균값으로 채워서 출력
# np.random.seed(0)

# sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

# sample_data_frame.iloc[1, 0] = NA
# sample_data_frame.iloc[6:, 2] = NA

# print(sample_data_frame)
'''
          0         1         2         3
0  0.548814  0.715189  0.602763  0.544883
1       NaN  0.645894  0.437587  0.891773
2  0.963663  0.383442  0.791725  0.528895
3  0.568045  0.925597  0.071036  0.087129
4  0.020218  0.832620  0.778157  0.870012
5  0.978618  0.799159  0.461479  0.780529
6  0.118274  0.639921       NaN  0.944669
7  0.521848  0.414662       NaN  0.774234
8  0.456150  0.568434       NaN  0.617635
9  0.612096  0.616934       NaN  0.681820
'''
# sample_data_frame = sample_data_frame.fillna(sample_data_frame.mean())
# print(sample_data_frame)
'''
          0         1         2         3
0  0.548814  0.715189  0.602763  0.544883
1  0.531970  0.645894  0.437587  0.891773
2  0.963663  0.383442  0.791725  0.528895
3  0.568045  0.925597  0.071036  0.087129
4  0.020218  0.832620  0.778157  0.870012
5  0.978618  0.799159  0.461479  0.780529
6  0.118274  0.639921  0.523791  0.944669
7  0.521848  0.414662  0.523791  0.774234
8  0.456150  0.568434  0.523791  0.617635
9  0.612096  0.616934  0.523791  0.681820
'''

