# 4. 4 if문
# 4. 4. 1 비교 연산자
# 비교 연산자는 연산자 좌우에 있는 두 값의 관계를 조사한다
# 좌우가 동일한 경우에는 ==을, 다른 경우에는 !=을, 부등호는 >, <, >=, <=과 같이 사용할 수 있다
# = 은 사용되지 않는다는 점 주의
# 프로그래밍 세계에서 =은 대입의 의미이다

# 새로운 자료형, bool(불리언 자료형)
# bool형은 True, False 중 하나의 값을 가진 자료형이다
# int형으로 변환하면 True는 1, False는 0으로 변환된다
# 비교 연산자를 사용한 식이 성립할 때는 True, 성립하지 않을 때는 False이다

print(1 + 1 == 3) # False

print(4 + 6 != -10)  # True

# 4.4.2  if 문
# if문은 'if 조건식 : ...'의 형태를 하고 있고 '만약 조건식이 성립한다면....을 실시한다'는 조건에 따른 분기를 구현 할 수 있다
# 조건식은 비교 연산자를 이용한 식으로, 조건식이 성립하는  Ture일 때만 후반의 처리를 한다
# 조건문의 끝에는 ':'이 필요하다
# 파이썬에 익숙해지기 전까지는 ':'을 잊어버리기 쉬우므로 주의!
# 또한 조건이 성립했을 때 수행할 작업의 범위를 나타내기 위해 반드시 들여쓰기(indentation)를 해야 한다
# 조건식이 성립했을 때의 행동 범위를 들여쓰기하는 것이 파이썬의 특징
# if문이 True일 경우 들여쓰기 한 부분이 처리된다

n = 2
if n == 2 :
    print("아쉽습니다! 당신은 " + str(n) + "번째로 도착했습니다.") # 아쉽습니다! 당신은 2번째로 도착했습니다.

animal = "cat"
if animal == "cat" :
    print("고양이가 귀엽네요.") # 고양이가 귀엽네요.

n = 16
if n > 15 :
    print("큰 숫자") # 큰 숫자

# 4.4.3 else:
#     if문에 else를 사용하면 '그렇지 않으면...을 한다'처럼 조건에 따른 분기를 세밀하게 할 수 있다
# 사용법은 if와 똑같은 들여쓰기 위치에서 else:라고 쓴다
# if에서처럼 처리될 부분을 들여쓰기 해서 나타낸다

n = 2
if n == 1 :
    print("우승을 축하합니다!")
else :
    print("아쉽습니다! 당신은 " + str(n) + "번째로 도착했습니다.") # 아쉽습니다! 당신은 2번째로 도착했습니다.

animal = "cat"
if animal == "cat":
    print("고양이가 귀엽네요.")
else : 
    print("고양이가 아닙니다.") # 고양이가 귀엽네요.

n = 14
if n > 15 :
    print("큰 숫자")
else : 
    print("작은 숫자") # 작은 숫자

# 4.4.4 elif
# # if 문의 조건이 성립되지 않았을 경우 다른 조건을 정의하고 싶을 때 elif를 사용할 수 있다
# 물론 여러 elif를 설정할 수도 있다 
# 사용법 및 들여쓰기는 if와 동일하다
# elif는 if에서 지정한 조건에 해당하지 않을 때 위에서 아래 순서로 조건에 해당하는지 판단한다

number = 2
if number == 1 :
    print("금메달입니다")
elif number == 2 :
    print("은메달입니다")
elif number == 3 : 
    print("동메달입니다")
else :
    print("아쉽습니다, 당신은 " + str (number) + "번째로 도착했습니다")

n = 14
if n > 15 :
    print("큰 숫자")
elif 11 <= n <= 15 :
    print("중간 숫자")    

# 4.4.5 and, or, not
# and, or, not : boolean operator(부울 연산자)라고 부르며 조건 분기문을 기술할 때 사용
# and나 or은 조건식 사이에 사용하며 and는 복수의 조건식이 모두 True인 경우 True를 반환하고,
# or은 복수의 조건식 중 하나라도 True인 경우 True를 반환한다
# not은 조건식 앞에 사용하며 조건이 True인 경우 False를 반환하고 False인 경우 True를 반환한다

# 사용법
