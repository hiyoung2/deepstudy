'''
function : 함수

리스트 : 데이터가 많아짐에 따라 그 데이터를 정리정돈하기 위한 일종의 수납상자

logic도 마찬가지, 코드가 많아짐에 따라 그 코드도 정리정돈하기 위한 수단이 필요한데
함수를 바라보는 시각 첫번째로, 정리정돈 하기 위한 것이다 정도로 이해

다면적인 함수이지만 현재는 이 정도로 알아두자

'''

# 평균을 구해보자

a = 1
b = 2
c = 3
s = a + b + c
r = s/3

print(r) # 2.0

# 만약 위의 코드 위아래로 1억개가 있다면?
# 코드가 많아짐에 따라 정리정돈의 필요성이 증가함
# 아주 자주 사용되는 코드, 누구든지 필요할 수 있는 보편적인 코드라면 굉장히 많은 중복이 발생한다
# 계속 copy 할 수 없다
# 여기에 함수를 도입하면 행복해질 것 ㅋㅋ

# average() 라는 평균을 출력해주는 함수를 어떻게 만들고 또 호출할 수 있을까?

# def라는 키워드로 시작한다, 파이썬은 def를 보고 함수를 생성하는구나, 하고 알게 된다
# 그러면 함수의 이름은 뭐지? 라고 생각하게 된다 따라서 def 뒤에 함수의 이름을 입력한다
# 그리고 위에서 평균을 출력하기 위해 입력한 코드를 copy & paste 한다

'''
# 1
def average():
    a = 1
    b = 2
    c = 3
    s = a + b + c
    r = s/3
    print(r)

average() # 함수 호출 # 2.0
'''

# 함수를 사용함으로써
# 가독성, 코드를 위한 이해가 쉬워진다
# 평균을 1억번 구해야 한다면
# 함수를 정의하고 average()만 1억번 복붙하면 된다

# 코드를 획기적으로 줄일 수 있고, c를 4로 바꾸면 한꺼번에 모두 결괏값에 새로이 반영이 된다
# 코드의 범위도 한 눈에 들어오게 된다

######################################################################################
# 여기까지 만든 함수는 똑똑한 함수는 아니다
# 언제나 똑같이 동작하기 때문이다
# 더 쓸만하게 고치려면 우리가 입력값을 달리 줄 수 있게 하면 좋을 것
# 위의 함수를 주석처리 하고 새로 만들어보자

# 10, 20, 30을 넣고 평균을 나오게 해 보자

'''
# 2
def average(a,b,c): # a=10, b=20, c=30 / a, b, c는 average라는 함수 안에서 쓰이는 변수!
    s = a + b + c
    r = s/3
    print(r)

average(10,20,30) # 20.0

# a, b, c는
# 함수를 사용하는 쪽(line60) 과 함수가 구현된 쪽(line64~66) 사이에 있는 일종의 매개자 역할을 한다
# 이를 매개변수, parameter 라고 한다
# 그리고 함수의 입력값으로 전달한 값들(10, 20, 30) == 인자, argument
# argument '10'을 입력한 것이고 parameter 'a'가 받아서 내부에서 사용하고 있는 것!
# 여기까지가 함수의 input 부분에 해당한다
'''

######################################################################################
# 또 하나의 개선점?

# 함수는 내부적으로 두 가지 일을 한다
# 첫 번째로 평균을 구하는 일, 두 번째로 출력을 하는 일

# 좋은 부품은 한 가지 일을 하는 부품이다
# 그래야지만, 그 부품 안에는 불필요한 기능들이 없기 때문에 최소한의 기능을 이용해서 다른 부품들과 결합하여 무언가를 만들 수 있기 때문이다

# 예를 들어, 평균을 구하는데 그것을 파일에다가 저장하고 싶다면?
# 또는 웹사이트에 업로드를 하고 싶다? 또는 이메일로 보내고 싶다?

# 함수는 자기 이름에 걸맞는 본질적인 작업만 할 수 있게 만들어야 한다

# print(average(10,20,30)) 라고 했을 때
# 위의 #2 함수와 똑같이 동작하도록 만들어보자

def average(a,b,c):
    s = a + b + c
    r = s/3
    return r

print(average(10,20,30)) 

def a():
    return "hahaha"

print(a())

# return 다음에 위치한 것이 함수의 표현식이라고 보면 된다

# 함수는 하나의 기능만을 가지고 있을 때 다양하게 써 먹을 수 있다
